"""
希尔排序
一种分组插入排序算法
首先取一个整数d1=n/2，将元素分为d1个组，每组相邻两元素之间距离为d1，在各组内进行直接插入排序
取第二个整数d2=d1/2，重复上述过程，知道dj=1，即所有元素在同一组内进行直接插入排序
希尔排序每趟并不是某些元素有序，而是使整体数据越来越有序，最后一趟排序使得所有数据有序

速度：
    时间复杂度与d的取值规则有关，是个非常有趣的问题，维基百科中针对不同的d的取值规则，有不同的时间复杂度说明，高校也未停止对其的研究。
    速度方面，比常规插入排序快很多很多，堆排序速度也比希尔排序慢很多
"""


# 插入排序：判断每一个有序区，如果被抽出的数小于被循环的有序区的数，则把这个数往后移动一个位置。
# 时间复杂度：2层循环o(n^2)
def insert_sort2(li: list, d):
    # i为无序区
    for i in range(d, len(li)):
        # 被从无序区抽出
        x = li[i]
        # j为有序区
        j = i - d
        # 从后往前查找有序区，一直到查找出第一个不大于被抽出的数的那个位置
        while j >= 0 and x < li[j]:
            # 被抽出元素与有序区每个数比较，小于则把当前遍历的有序区的数往后移动
            li[j + d] = li[j]
            j -= d
        # 循环结束后把空余位置填上（当前j后面的位置，画个图想一想就能看出来了）
        li[j + d] = x


# 希尔排序
def shell_sort(li):
    d = len(li) // 2
    while d >= 1:
        insert_sort2(li, d)
        d //= 2
